{"version":3,"file":"main.js","mappings":"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","sources":["webpack://sir-sprints-a-lot/./src/scripts/levels.js","webpack://sir-sprints-a-lot/./src/scripts/background.js","webpack://sir-sprints-a-lot/./src/scripts/input.js","webpack://sir-sprints-a-lot/./src/scripts/util.js","webpack://sir-sprints-a-lot/./src/scripts/knight.js","webpack://sir-sprints-a-lot/./src/scripts/platform.js","webpack://sir-sprints-a-lot/./src/scripts/game.js","webpack://sir-sprints-a-lot/./src/index.js"],"sourcesContent":["const canvas = document.getElementById('canvas1');\nconst ctx = canvas.getContext('2d');\ncanvas.width = 800;\ncanvas.height = 700;\n\nexport default class Level {\n    constructor(name, platforms, bgimage){\n        this.name = name;\n        this.platforms = platforms;\n        this.background = new Image();\n        this.background.src = bgimage;\n        this.x = 0;\n        this.y = 0;\n        this.width = canvas.width;\n        this.height = canvas.height;\n        this.x2 = this.width;\n        this.speed = 5;\n    };\n\n    draw(ctx){\n        ctx.drawImage(this.background, this.x, this.y, this.width, this.height)\n\n        this.platforms.forEach((platform) => {\n            platform.draw(ctx);\n        });\n    };\n\n    drawNext(ctx, image){\n        ctx.drawImage(image, this.x2, this.y, this.width, this.height)\n    };\n\n    update(input){\n        this.x -= this.speed;\n        this.x2 -= this.speed;\n\n        if (this.x > 0){\n            this.x2 = this.x - this.width;\n        }\n        if (this.x2 > 0){\n            this.x = this.x2 - this.width;\n        }\n\n        if (input.keys.includes('d')){\n            this.speed = 5;\n        } else if (input.keys.includes('a')){\n            this.speed = -5;\n        } else {\n            this.speed = 0;\n        }\n        \n        //horizontal movement\n        if (this.x < -(this.width)){\n            this.x = this.width;\n        } else if (this.x > (this.width)){\n            this.x = -(this.width);\n        }\n    };\n}","import InputHandler from \"./input.js\";\n\nconst canvas = document.getElementById('canvas1');\nconst ctx = canvas.getContext(\"2d\");\nconst CANVAS_WIDTH = canvas.width = 800;\nconst CANVAS_HEIGHT = canvas.height = 700;\n// let gameSpeed = 5; Player.speed;\n\n\nconst backgroundLayer1 = new Image();\nbackgroundLayer1.src = '/Assets/Background/BGBack.png';\nconst backgroundLayer2 = new Image();\nbackgroundLayer2.src = '/Assets/Background/BGFront.png';\nconst backgroundLayer3 = new Image();\nbackgroundLayer3.src = '/Assets/Background/CloudsBack.png';\nconst backgroundLayer4 = new Image();\nbackgroundLayer4.src = '/Assets/Background/CloudsFront.png';\n\n\nexport default class Layer {\n    constructor(image, speedModifier, gameSpeed){\n        this.x = 0;\n        this.y = 0;\n        this.width = 1024;\n        this.height = 700;\n        this.x2 = this.width;\n        this.image = image;\n        this.speedModifier = speedModifier;\n        this.speed = gameSpeed * this.speedModifier;\n    }\n\n    //move layers horizontally by changing their this.x and this.x2 and update them\n    //when the layers move offscreen\n    update(input){\n        this.x -= this.speed;\n        this.x2 -= this.speed;\n\n        if (this.x > 0){\n            this.x2 = this.x - this.width;\n        }\n        if (this.x2 > 0){\n            this.x = this.x2 - this.width;\n        }\n\n        if (input.keys.includes('d')){\n            this.speed = 5;\n        } else if (input.keys.includes('a')){\n            this.speed = -5;\n        } else {\n            this.speed = 0;\n        }\n        \n        //horizontal movement\n        if (this.x < -(this.width)){\n            this.x = this.width;\n        } else if (this.x > (this.width)){\n            this.x = -(this.width);\n        }\n    }\n    //take in information about the layer object and draw it on the canvas\n    //every time update is called, draw will be called to draw the layer\n    //at the new position\n    draw(){\n        ctx.drawImage(this.image, this.x, this.y, this.width, this.height)\n        ctx.drawImage(this.image, this.x2, this.y, this.width, this.height)\n    }   \n}\n\nconst layer1 = new Layer(backgroundLayer1, 1);\nconst layer2 = new Layer(backgroundLayer2, 1);\nconst layer3 = new Layer(backgroundLayer3, 0.5);\nconst layer4 = new Layer(backgroundLayer4, 0.5);\n\nconst allLayers = [layer3, layer4, layer1, layer2];\n\nfunction animate(){\n    ctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n    allLayers.forEach(object => {\n        object.update(input);\n        object.draw();\n    });\n    requestAnimationFrame(animate);\n};","export default class InputHandler {\n    constructor(){\n        this.keys = [];\n        window.addEventListener('keydown', event => {\n            // console.log(event.key);\n            if ((event.key === 's' ||\n                event.key === 'w' ||\n                event.key === 'a' ||\n                event.key === 'd') \n                && !(this.keys.includes(event.key))){\n                    this.keys.push(event.key)\n                }\n            });\n            window.addEventListener('keyup', event => {\n            // console.log(event.key);\n            if (event.key === 's' ||\n            event.key === 'w' ||\n            event.key === 'a' ||\n            event.key === 'd') {\n                this.keys.splice(this.keys.indexOf(event.key), 1);\n            }\n        });\n    }\n}","//holds math equations that can't be done by Math\n\nconst canvas = document.getElementById('canvas1');\nconst ctx = canvas.getContext('2d');\ncanvas.width = 800;\ncanvas.height = 700;\n\nexport function distance(pos1, pos2){\n    const x1 = pos1[0];\n    const y1 = pos1[1];\n    const x2 = pos2[0];\n    const y2 = pos2[1];\n\n    return Math.sqrt(((x1 - x2) ** 2) + ((y1 - y2) ** 2));\n};\n\nexport function flipHorizontally(img, x, y){\n    ctx.translate(x + img.width, y);\n    ctx.scale(-1, 1);\n    ctx.drawImage(img, 0, 0);\n    ctx.setTransform(1,0,0,1,0,0);\n}","    const canvas = document.getElementById('canvas1');\n    const ctx = canvas.getContext('2d');\n    canvas.width = 800;\n    canvas.height = 700;\n\n    import InputHandler from \"/src/scripts/input.js\";\n    import { distance, flipHorizontally } from \"/src/scripts/util.js\";\n\n    const idleImage = new Image();\n    idleImage.src = '/Assets/Colour1/Outline/120x80_gifs/__Idle.gif';\n    const crouchImage = new Image();\n    crouchImage.src = '/Assets/Knight/Colour1/Outline/120x80_PNGSheets/_CrouchFull.png';\n    const crouchWalkImage = new Image();\n    crouchWalkImage.src = '/Assets/Knight/Colour1/Outline/120x80_PNGSheets/_CrouchWalk.png';\n    const runImage = new Image();\n    runImage.src = '/Assets/Knight/Colour1/Outline/120x80_PNGSheets/_Run.png';\n    const jumpImage = new Image();\n    jumpImage.src = '/Assets/Knight/Colour1/Outline/120x80_PNGSheets/_Jump.png';\n    // const turnAroundImage = new Image();\n    // turnAroundImage = 'Assets/Knight/Colour1/Outline/120x80_PNGSheets/_TurnAround.png';\n\n    const spriteSheet = [idleImage, crouchImage, crouchWalkImage, runImage, jumpImage];\n   \n    export default class Player {\n        constructor(gameWidth, gameHeight, sprites){\n            this.gameWidth = gameWidth;\n            this.gameHeight = gameHeight;\n            this.width = 120;\n            this.height = 80;\n            this.x = 32;\n            this.y = this.gameHeight - this.height - 64;\n            this.image = idleImage;\n            this.maxFrame = 10;\n            this.frameX = 0;\n            this.frameY = 0;\n            this.fps = 20;\n            this.frameTimer = 0;\n            this.frameInterval = 1000/this.fps;\n            this.speed = 0;\n            this.vel = 0;\n            this.grav = 1;\n        }\n        \n        draw(context){\n            // context.fillStyle = 'white'\n            // context.fillRect(this.x, this.y, this.width, this.height)\n            context.drawImage(this.image, \n                            (this.frameX * this.width), \n                            (this.frameY * this.height), \n                            this.width, \n                            this.height, \n                            this.x, \n                            this.y, \n                            this.width, \n                            this.height);\n        }\n\n        update(input, deltaTime, sprites){\n            //sprite animation\n            if (this.frameTimer > this.frameInterval){\n                if (this.frameX >= this.maxFrame){\n                    this.frameX = 0;\n                } else {\n                    this.frameX++\n                }\n                this.frameTimer = 0;\n            } else {\n                this.frameTimer += deltaTime;\n            }\n\n            //controls\n            if (input.keys.includes('d')){\n                this.speed = 5;\n                this.image = sprites[3];\n            } else if (input.keys.includes('a')){\n                this.speed = -5;\n                this.image = sprites[3];\n            } else if (input.keys.includes('w') && this.onGround()){\n                // console.log(\"jumping\")\n                this.vel -= 15;\n            } else {\n                this.speed = 0;\n                this.image = sprites[0];\n            }\n            \n            //horizontal movement\n            this.x += this.speed;\n            if (this.x < 0){\n                this.x = 0;\n            } else if (this.x > (this.gameWidth - this.width)) {\n                this.x = this.gameWidth - this.width;\n            }\n\n            //vertical movement\n            this.y += this.vel;\n            if (!this.onGround()){\n                this.vel += this.grav;\n            } else {\n                this.vel = 0;\n            }\n            if (this.y > (this.gameHeight - this.height)){\n                this.y = this.gameHeight - this.height;\n            }\n        }\n\n        onGround(){\n            return (this.y >= this.gameHeight - this.height - 64);\n        };\n    }\n\n    const input = new InputHandler();\n    const testPlayer = new Player(canvas.width, canvas.height);\n\n    function animate(){\n        ctx.clearRect(0, 0, canvas.width, canvas.height)\n        testPlayer.draw(ctx);\n        testPlayer.update(input);\n        requestAnimationFrame(animate);\n    }\n","export default class Platform {\n    constructor(x, y , height, width){\n        this.x = x;\n        this.y = y;\n        this.height = height;\n        this.width = width;\n    };\n\n    draw(ctx) {\n        // ctx.fillStyle = \"#333\";\n        // ctx.fillRect(this.x, this.y, this.height, this.width);\n    }\n}","import levelsData from \"/Assets/Levels/levels.json\";\nimport Level from \"/src/scripts/levels.js\";\nimport Layer from \"/src/scripts/background.js\";\nimport Player from \"/src/scripts/knight\";\nimport InputHandler from \"/src/scripts/input.js\";\nimport Platform from \"/src/scripts/platform.js\";\n\nconst canvas = document.getElementById('canvas1');\nconst ctx = canvas.getContext(\"2d\");\nconst CANVAS_WIDTH = canvas.width = 800;\nconst CANVAS_HEIGHT = canvas.height = 700;\n\nconst idleImage = new Image();\nidleImage.src = '/Assets/Colour1/Outline/120x80_PNGSheets/_Idle.png';\nconst crouchImage = new Image();\ncrouchImage.src = '/Assets/Knight/Colour1/Outline/120x80_PNGSheets/_CrouchFull.png';\nconst crouchWalkImage = new Image();\ncrouchWalkImage.src = '/Assets/Knight/Colour1/Outline/120x80_PNGSheets/_CrouchWalk.png';\nconst runImage = new Image();\nrunImage.src = '/Assets/Knight/Colour1/Outline/120x80_PNGSheets/_Run.png';\nconst jumpImage = new Image();\njumpImage.src = '/Assets/Knight/Colour1/Outline/120x80_PNGSheets/_Jump.png';\n// const turnAroundImage = new Image();\n// turnAroundImage = 'Assets/Knight/Colour1/Outline/120x80_PNGSheets/_TurnAround.png';\n\nconst spriteSheet = [idleImage, crouchImage, crouchWalkImage, runImage, jumpImage];\n\nconst backgroundLayer1 = new Image();\nbackgroundLayer1.src = '/Assets/Background/BGBack.png';\nconst backgroundLayer2 = new Image();\nbackgroundLayer2.src = '/Assets/Background/BGFront.png';\nconst backgroundLayer3 = new Image();\nbackgroundLayer3.src = '/Assets/Background/CloudsBack.png';\nconst backgroundLayer4 = new Image();\nbackgroundLayer4.src = '/Assets/Background/CloudsFront.png';\n\n\n\nconst input = new InputHandler();\nconst testPlayer = new Player(canvas.width, canvas.height);\n\nconst layer1 = new Layer(backgroundLayer1, 1, testPlayer.speed);\nconst layer2 = new Layer(backgroundLayer2, 1, testPlayer.speed);\nconst layer3 = new Layer(backgroundLayer3, 0.5, testPlayer.speed);\nconst layer4 = new Layer(backgroundLayer4, 0.5, testPlayer.speed);\n\nconst allLayers = [layer3, layer4, layer1, layer2];\n\nlet levels = [];\nfor (const data in levelsData) {\n    const lev = levelsData[data];\n    const platforms = [];\n    lev.platforms.forEach(plat => {\n        platforms.push(new Platform(plat.x, plat.y, plat.width, plat.height))       \n    });\n    levels.push(new Level(lev.name, platforms, lev.image)); \n};\n\nexport default class Game {\n    constructor(player, levels, ctx, layers, input){\n        this.player = player;\n        this.levels = levels;\n        this.input = input\n        this.curLevel = levels[0];\n        this.nextLevel = levels[1];\n        this.ctx = ctx;\n        this.layers = layers;\n        this.lastTime = 0;\n        this.randomLevels = levels.slice(1);\n    };\n\n    setNextLevel(){\n        let levelSelector = Math.floor(Math.random() * 8);\n        return this.randomLevels[levelSelector];\n    };\n\n    changeCurLevel(){\n        this.curLevel = this.nextLevel;\n        this.setNextLevel();\n    };\n\n    animate(timeStamp) {\n        const deltaTime = timeStamp - this.lastTime;\n        // Calculate the x-position of the player relative to the canvas center\n        const playerXPosRelativeToCenter = this.player.x - CANVAS_WIDTH/2;\n        // Check if the player has moved past the center of the canvas\n        if (playerXPosRelativeToCenter > 0) {\n            // Move the platforms and background layers to simulate scrolling\n            const scrollDistance = playerXPosRelativeToCenter;\n            for (const platform of this.curLevel.platforms) {\n                platform.x -= scrollDistance;\n            }\n            for (const layer of this.layers) {\n                layer.update(this.input);\n            }\n            // Check if the current level has been completely scrolled off the screen\n            if (this.curLevel.platforms[0].x + this.curLevel.platforms[0].width < 0) {\n                // If so, change to the next level and reset its position\n                this.changeCurLevel();\n            }\n        }\n        this.ctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n        for (const layer of this.layers) {\n          layer.draw(this.ctx);\n        }\n        this.curLevel.draw(this.ctx);\n        this.curLevel.drawNext(this.ctx, this.nextLevel.background)\n        this.player.draw(this.ctx);\n        this.player.update(input, deltaTime, spriteSheet);\n        this.curLevel.update(input);\n        requestAnimationFrame(this.animate.bind(this));\n    }\n}","import levelsData from \"/Assets/Levels/levels.json\";\nimport Level from \"/src/scripts/levels.js\";\nimport Layer from \"/src/scripts/background.js\";\nimport Player from \"/src/scripts/knight\";\nimport InputHandler from \"/src/scripts/input.js\";\nimport Platform from \"/src/scripts/platform.js\";\nimport Game from \"/src/scripts/game\";\nimport { distance, flipHorizontally } from \"./scripts/util.js\";\n\nwindow.addEventListener('load', function(){\n    const canvas = document.getElementById('canvas1');\n    const ctx = canvas.getContext('2d');\n    canvas.width = 800;\n    canvas.height = 700;\n\n    const idleImage = new Image();\n    idleImage.src = '/Assets/Colour1/Outline/120x80_PNGSheets/_Idle.png';\n    const crouchImage = new Image();\n    crouchImage.src = '/Assets/Knight/Colour1/Outline/120x80_PNGSheets/_CrouchFull.png';\n    const crouchWalkImage = new Image();\n    crouchWalkImage.src = '/Assets/Knight/Colour1/Outline/120x80_PNGSheets/_CrouchWalk.png';\n    const runImage = new Image();\n    runImage.src = '/Assets/Knight/Colour1/Outline/120x80_PNGSheets/_Run.png';\n    const jumpImage = new Image();\n    jumpImage.src = '/Assets/Knight/Colour1/Outline/120x80_PNGSheets/_Jump.png';\n    // const turnAroundImage = new Image();\n    // turnAroundImage = 'Assets/Knight/Colour1/Outline/120x80_PNGSheets/_TurnAround.png';\n\n    const spriteSheet = [idleImage, crouchImage, crouchWalkImage, runImage, jumpImage];\n\n    const backgroundLayer1 = new Image();\n    backgroundLayer1.src = '/Assets/Background/BGBack.png';\n    const backgroundLayer2 = new Image();\n    backgroundLayer2.src = '/Assets/Background/BGFront.png';\n    const backgroundLayer3 = new Image();\n    backgroundLayer3.src = '/Assets/Background/CloudsBack.png';\n    const backgroundLayer4 = new Image();\n    backgroundLayer4.src = '/Assets/Background/CloudsFront.png';\n\n    \n    \n    const input = new InputHandler();\n    const testPlayer = new Player(canvas.width, canvas.height);\n    let levels = [];\n    for (const data in levelsData) {\n        const lev = levelsData[data];\n        const platforms = [];\n        lev.platforms.forEach(plat => {\n            platforms.push(new Platform(plat.x, plat.y, plat.width, plat.height))       \n        });\n        levels.push(new Level(lev.name, platforms, lev.image));\n        \n    };\n\n    const layer1 = new Layer(backgroundLayer1, 1, testPlayer.speed);\n    const layer2 = new Layer(backgroundLayer2, 1, testPlayer.speed);\n    const layer3 = new Layer(backgroundLayer3, 0.5, testPlayer.speed);\n    const layer4 = new Layer(backgroundLayer4, 0.5, testPlayer.speed);\n\n    const allLayers = [layer3, layer4, layer1, layer2];\n    let lastTime = 0;\n\n    const game = new Game(testPlayer, levels, ctx, allLayers, input);\n\n    game.animate(0);\n\n    // function animate(timeStamp){\n    //     const deltaTime = timeStamp - lastTime\n    //     ctx.clearRect(0, 0, canvas.width, canvas.height)\n    //     allLayers.forEach(object => {\n    //         object.update(input);\n    //         object.draw();\n    //     });\n    //     levels[0].draw(ctx);\n    //     levels[0].update(input);\n    //     testPlayer.draw(ctx);\n    //     testPlayer.update(input, deltaTime, spriteSheet);\n    //     requestAnimationFrame(animate);\n    // };\n    // animate(0);\n});"],"names":["canvas","document","getElementById","getContext","width","height","Level","constructor","name","platforms","bgimage","this","background","Image","src","x","y","x2","speed","draw","ctx","drawImage","forEach","platform","drawNext","image","update","input","keys","includes","backgroundLayer1","backgroundLayer2","backgroundLayer3","backgroundLayer4","Layer","speedModifier","gameSpeed","InputHandler","window","addEventListener","event","key","push","splice","indexOf","idleImage","Player","gameWidth","gameHeight","sprites","maxFrame","frameX","frameY","fps","frameTimer","frameInterval","vel","grav","context","deltaTime","onGround","Platform","CANVAS_WIDTH","CANVAS_HEIGHT","crouchImage","crouchWalkImage","runImage","jumpImage","spriteSheet","testPlayer","levels","data","levelsData","lev","plat","Game","player","layers","curLevel","nextLevel","lastTime","randomLevels","slice","setNextLevel","levelSelector","Math","floor","random","changeCurLevel","animate","timeStamp","playerXPosRelativeToCenter","scrollDistance","layer","clearRect","requestAnimationFrame","bind","layer1","layer2","layer3","layer4"],"sourceRoot":""}